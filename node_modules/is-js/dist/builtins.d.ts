/**
 * Determines if the argument is an object.
 *
 * @remarks
 * Nearly everything in Javascript is an object; this method discerns between
 * native primitives (e.g. `true`, `3`, `some text`) and their object-wrapped
 * variants (Boolean, Number, String)
 *
 * @param value - Value in question
 * @returns `true` if the given argument is an object
 */
export declare function object(value: unknown): value is Object;
/**
 * Determines if the argument is an array.
 *
 * @remarks
 * Defaults to the native `Array.isArray` method, if present.
 *
 * @param value - Value in question
 * @returns `true` if the given argument is an array
 */
export declare const array: (arg: any) => arg is any[];
/**
 * Determines if the argument is a date.
 *
 * @param value - Value in question
 * @returns `true` if the given argument is a date
 */
export declare function date(value: unknown): value is Date;
/**
 * Determines if the argument is a function.
 *
 * @param value - Value in question
 * @returns `true` if the given argument is a function
 */
export declare function func(value: unknown): value is Function;
/**
 * Determines if the argument is an error.
 *
 * @param value - Value in question
 * @returns `true` if the given argument is an error
 */
export declare function error(value: unknown): value is Error;
/**
 * Determines if the argument is a regular expression.
 *
 * @param value - Value in question
 * @returns `true` if the given argument is a regular expression
 */
export declare function regex(value: unknown): value is RegExp;
/**
 * Determines if the argument is a native promise.
 *
 * @remarks
 * Some libraries and frameworks still include their own polyfilled Promises,
 * in which case this method is unreliable. If you are using such a library,
 * please defer to the provided Promise implementation or use {@link promiseLike}
 *
 * @param value - Value in question
 * @returns `true` if the given argument is a string
 */
export declare function promise(value: unknown): value is Promise<unknown>;
/**
 * Determines if the argument conforms to the minimal interface of a Promise;
 * that is, it has a method named `then`.
 *
 * @param value - Value in question
 * @returns `true` if the given argument conforms to the Promise interface
 */
export declare function promiseLike(value: unknown): value is {
    then: (...args: Array<any>) => any;
};
