"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nonNil = exports.empty = void 0;
const builtins_1 = require("./builtins");
function empty(value) {
    return (0, builtins_1.array)(value)
        ? value.length === 0
        : Object.getOwnPropertyNames(value).length === 0 &&
            Object.getOwnPropertySymbols(value).length === 0;
}
exports.empty = empty;
/**
 * Determines if the argument is neither `null` nor `undefined`, intended for
 * inference positions where guaranteeing a value exists simplifies resulting
 * code.
 *
 * @example
 * ```
 * function lookup<T>(dict: Record<string, T>, keys: Array<string>): Array<T> {
 *     return keys.map((key) => dict[key]).filter(is.nonNil);
 * }
 * ```
 *
 * @param value value in question
 * @returns `true` if the given value is neither `null` nor `undefined`
 */
function nonNil(value) {
    return value !== null && value !== undefined;
}
exports.nonNil = nonNil;
